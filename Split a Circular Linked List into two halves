#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int val) : data(val), next(nullptr) {}
};

void splitCircularLinkedList(Node* head, Node** firstHead, Node** secondHead) {
    if (!head) {
        *firstHead = *secondHead = nullptr;
        return;
    }

    Node* slow = head;
    Node* fast = head->next;

    while (fast != head && fast->next != head) {
        slow = slow->next;
        fast = fast->next->next;
    }

    *firstHead = head;
    *secondHead = slow->next;

    slow->next = *firstHead;

    Node* current = *secondHead;
    while (current->next != head) {
        current = current->next;
    }
    current->next = *secondHead;
}

void printCircularLinkedList(Node* head) {
    if (!head) {
        return;
    }

    Node* current = head;
    do {
        cout << current->data << " ";
        current = current->next;
    } while (current != head);

    cout << endl;
}

int main() {
    int n;
    cin >> n;

    Node* head = nullptr;
    Node* tail = nullptr;

    for (int i = 0; i < n; ++i) {
        int val;
        cin >> val;

        Node* newNode = new Node(val);
        if (!head) {
            head = tail = newNode;
            tail->next = head;  // Circular linking
        } else {
            tail->next = newNode;
            tail = tail->next;
            tail->next = head;  // Circular linking
        }
    }

    Node* firstHalfHead = nullptr;
    Node* secondHalfHead = nullptr;

    splitCircularLinkedList(head, &firstHalfHead, &secondHalfHead);

    
    printCircularLinkedList(firstHalfHead);


    printCircularLinkedList(secondHalfHead);

    // Clean up memory
    Node* current = head;
    while (current && current->next != head) {
        Node* temp = current;
        current = current->next;
        delete temp;
    }
    delete current;

    return 0;
}
