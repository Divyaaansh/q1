#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int val) : data(val), next(nullptr) {}
};

Node* reverseLinkedList(Node* head) {
    if (!head || !head->next) {
        return head;
    }

    Node* prev = nullptr;
    Node* current = head;
    Node* nextNode = nullptr;

    while (current != nullptr) {
        nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    return prev;
}

Node* mergeLinkedLists(Node* list1, Node* list2) {
    Node* head = list1;
    Node* temp = nullptr;

    while (list1 != nullptr && list2 != nullptr) {
        temp = list1->next;
        list1->next = list2;
        list1 = temp;

        temp = list2->next;
        list2->next = list1;
        list2 = temp;
    }

    return head;
}

void printLinkedList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }
    cout << endl;
}

int main() {
    int t;
    cin >> t;

    while (t--) {
        int n;
        cin >> n;

        Node* head = nullptr;
        Node* tail = nullptr;

        for (int i = 0; i < n; ++i) {
            int val;
            cin >> val;

            Node* newNode = new Node(val);
            if (!head) {
                head = tail = newNode;
            } else {
                tail->next = newNode;
                tail = tail->next;
            }
        }

        Node* slow = head;
        Node* fast = head;
        
        while (fast != nullptr && fast->next != nullptr) {
            slow = slow->next;
            fast = fast->next->next;
        }

        Node* secondHalf = reverseLinkedList(slow->next);
        slow->next = nullptr;

        head = mergeLinkedLists(head, secondHalf);

        printLinkedList(head);

        // Clean up memory
        while (head) {
            Node* temp = head;
            head = head->next;
            delete temp;
        }
    }

    return 0;
}
