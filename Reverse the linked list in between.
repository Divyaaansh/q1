#include <iostream>
using namespace std;

class Node {
public:
    int data;
    Node* next;

    Node(int val) : data(val), next(nullptr) {}
};

Node* reverseSublist(Node* head, int left, int right) {
    if (!head || left == right) {
        return head;
    }

    Node* prev = nullptr;
    Node* current = head;

    for (int i = 1; i < left; ++i) {
        prev = current;
        current = current->next;
    }

    Node* subListPrev = prev;
    Node* subListTail = current;

    for (int i = left; i <= right; ++i) {
        Node* nextNode = current->next;
        current->next = prev;
        prev = current;
        current = nextNode;
    }

    if (subListPrev) {
        subListPrev->next = prev;
    } else {
        head = prev;
    }

    subListTail->next = current;

    return head;
}

void printLinkedList(Node* head) {
    Node* current = head;
    while (current != nullptr) {
        cout << current->data << " ";
        current = current->next;
    }
    cout << endl;
}

int main() {
    int n;
    cin >> n;

    Node* head = nullptr;
    Node* tail = nullptr;

    for (int i = 0; i < n; ++i) {
        int val;
        cin >> val;

        Node* newNode = new Node(val);
        if (!head) {
            head = tail = newNode;
        } else {
            tail->next = newNode;
            tail = tail->next;
        }
    }

    int left, right;
    cin >> left >> right;

    head = reverseSublist(head, left, right);
    printLinkedList(head);

    // Clean up memory
    while (head) {
        Node* temp = head;
        head = head->next;
        delete temp;
    }

    return 0;
}
